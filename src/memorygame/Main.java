/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package memorygame;

import java.awt.Color;
import java.awt.Image;
import java.util.Arrays;
import java.awt.Point;
import java.awt.Toolkit;
import java.util.Random;
import javax.swing.JButton;
import javax.swing.Timer;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 *
 * @author Jiri Booij, Sava Sharif
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    final Color[] ColorClicked = new Color[2];
    final JButton[] CardArray = new JButton[2];
    final Color[] colorArray = new Color[]{Color.BLUE, Color.BLUE, Color.CYAN, Color.CYAN, Color.MAGENTA, Color.MAGENTA, Color.ORANGE, Color.ORANGE, Color.PINK, Color.PINK, Color.YELLOW, Color.YELLOW, Color.RED, Color.RED, Color.GREEN, Color.GREEN};
    int timesclicked = 1;
    int arraygrootte = colorArray.length / 4;
    final Color[][] twodArray = new Color[arraygrootte][arraygrootte];
    Timer timer, timer2, timer3;
    //String filename = "C:\\Documents\\GitHub\\MemoryGame\\highscore.txt";
    String filename = "highscore.txt";
    String line = null;
    int highscore;

    public Main() {

        initComponents();
        try {
            setCursor(Toolkit.getDefaultToolkit().createCustomCursor(new ImageIcon("cursor1.png").getImage(), new Point(0, 0), "custom cursor"));
        } catch (Exception e) {
            System.out.println("Error reading custom curosr");
        }

        Score.setText("0");
        ShuffelArray(colorArray);
        CopyArray(colorArray, twodArray, arraygrootte);
        SetBackground(twodArray);

        //read the stored highscore
        try {
            //FileReader reads text files in the default encoding.
            FileReader filereader = new FileReader(filename);

            //Always wrap FileReader in BufferedReader.
            BufferedReader bufferedReader = new BufferedReader(filereader);
            while ((line = bufferedReader.readLine()) != null) {
                Highscore.setText(line);
                highscore = Integer.parseInt(line);
            }
        } catch (FileNotFoundException ex) {
            System.out.println("Unable to open file '" + filename + "'");
        } catch (IOException ex) {
            System.out.println("Error reading file '" + filename + "'");
        }

        //timer for GUI bug
        timer = new Timer(500, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                CheckIfSame();
            }
        });

        //launch new JFrame FinishedGame.java
        timer3 = new Timer(250, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                FinishedGame finishedgame = new FinishedGame();
                finishedgame.setVisible(true);
                timer3.stop();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CardColor1 = new javax.swing.JPanel();
        Card1 = new javax.swing.JButton();
        CardColor2 = new javax.swing.JPanel();
        Card2 = new javax.swing.JButton();
        CardColor3 = new javax.swing.JPanel();
        Card3 = new javax.swing.JButton();
        CardColor4 = new javax.swing.JPanel();
        Card4 = new javax.swing.JButton();
        CardColor5 = new javax.swing.JPanel();
        Card5 = new javax.swing.JButton();
        CardColor6 = new javax.swing.JPanel();
        Card6 = new javax.swing.JButton();
        CardColor7 = new javax.swing.JPanel();
        Card7 = new javax.swing.JButton();
        CardColor8 = new javax.swing.JPanel();
        Card8 = new javax.swing.JButton();
        CardColor9 = new javax.swing.JPanel();
        Card9 = new javax.swing.JButton();
        CardColor10 = new javax.swing.JPanel();
        Card10 = new javax.swing.JButton();
        CardColor11 = new javax.swing.JPanel();
        Card11 = new javax.swing.JButton();
        CardColor12 = new javax.swing.JPanel();
        Card12 = new javax.swing.JButton();
        CardColor13 = new javax.swing.JPanel();
        Card13 = new javax.swing.JButton();
        CardColor14 = new javax.swing.JPanel();
        Card14 = new javax.swing.JButton();
        CardColor15 = new javax.swing.JPanel();
        Card15 = new javax.swing.JButton();
        CardColor16 = new javax.swing.JPanel();
        Card16 = new javax.swing.JButton();
        TimesClicked = new java.awt.Label();
        Score = new javax.swing.JLabel();
        Highscore1 = new javax.swing.JLabel();
        Highscore = new javax.swing.JLabel();
        Finish = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        CardColor1.setBackground(new java.awt.Color(255, 153, 153));
        CardColor1.setMaximumSize(new java.awt.Dimension(100, 100));
        CardColor1.setMinimumSize(new java.awt.Dimension(100, 100));

        Card1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/memorygame/cards.jpg"))); // NOI18N
        Card1.setMaximumSize(new java.awt.Dimension(100, 100));
        Card1.setMinimumSize(new java.awt.Dimension(100, 100));
        Card1.setPreferredSize(new java.awt.Dimension(100, 100));
        Card1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CardColor1Layout = new javax.swing.GroupLayout(CardColor1);
        CardColor1.setLayout(CardColor1Layout);
        CardColor1Layout.setHorizontalGroup(
            CardColor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        CardColor1Layout.setVerticalGroup(
            CardColor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        CardColor2.setBackground(new java.awt.Color(255, 153, 153));
        CardColor2.setMaximumSize(new java.awt.Dimension(100, 100));

        Card2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/memorygame/cards.jpg"))); // NOI18N
        Card2.setMaximumSize(new java.awt.Dimension(100, 100));
        Card2.setMinimumSize(new java.awt.Dimension(100, 100));
        Card2.setPreferredSize(new java.awt.Dimension(100, 100));
        Card2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CardColor2Layout = new javax.swing.GroupLayout(CardColor2);
        CardColor2.setLayout(CardColor2Layout);
        CardColor2Layout.setHorizontalGroup(
            CardColor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        CardColor2Layout.setVerticalGroup(
            CardColor2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        CardColor3.setBackground(new java.awt.Color(255, 153, 153));
        CardColor3.setMaximumSize(new java.awt.Dimension(100, 100));
        CardColor3.setMinimumSize(new java.awt.Dimension(100, 100));

        Card3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/memorygame/cards.jpg"))); // NOI18N
        Card3.setMaximumSize(new java.awt.Dimension(100, 100));
        Card3.setMinimumSize(new java.awt.Dimension(100, 100));
        Card3.setPreferredSize(new java.awt.Dimension(100, 100));
        Card3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CardColor3Layout = new javax.swing.GroupLayout(CardColor3);
        CardColor3.setLayout(CardColor3Layout);
        CardColor3Layout.setHorizontalGroup(
            CardColor3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        CardColor3Layout.setVerticalGroup(
            CardColor3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        CardColor4.setBackground(new java.awt.Color(255, 153, 153));

        Card4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/memorygame/cards.jpg"))); // NOI18N
        Card4.setMaximumSize(new java.awt.Dimension(100, 100));
        Card4.setMinimumSize(new java.awt.Dimension(100, 100));
        Card4.setPreferredSize(new java.awt.Dimension(100, 100));
        Card4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CardColor4Layout = new javax.swing.GroupLayout(CardColor4);
        CardColor4.setLayout(CardColor4Layout);
        CardColor4Layout.setHorizontalGroup(
            CardColor4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        CardColor4Layout.setVerticalGroup(
            CardColor4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        CardColor5.setBackground(new java.awt.Color(255, 153, 153));

        Card5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/memorygame/cards.jpg"))); // NOI18N
        Card5.setMaximumSize(new java.awt.Dimension(100, 100));
        Card5.setMinimumSize(new java.awt.Dimension(100, 100));
        Card5.setPreferredSize(new java.awt.Dimension(100, 100));
        Card5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CardColor5Layout = new javax.swing.GroupLayout(CardColor5);
        CardColor5.setLayout(CardColor5Layout);
        CardColor5Layout.setHorizontalGroup(
            CardColor5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        CardColor5Layout.setVerticalGroup(
            CardColor5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        CardColor6.setBackground(new java.awt.Color(255, 153, 153));

        Card6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/memorygame/cards.jpg"))); // NOI18N
        Card6.setMaximumSize(new java.awt.Dimension(100, 100));
        Card6.setMinimumSize(new java.awt.Dimension(100, 100));
        Card6.setPreferredSize(new java.awt.Dimension(100, 100));
        Card6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CardColor6Layout = new javax.swing.GroupLayout(CardColor6);
        CardColor6.setLayout(CardColor6Layout);
        CardColor6Layout.setHorizontalGroup(
            CardColor6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        CardColor6Layout.setVerticalGroup(
            CardColor6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        CardColor7.setBackground(new java.awt.Color(255, 153, 153));

        Card7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/memorygame/cards.jpg"))); // NOI18N
        Card7.setMaximumSize(new java.awt.Dimension(100, 100));
        Card7.setMinimumSize(new java.awt.Dimension(100, 100));
        Card7.setPreferredSize(new java.awt.Dimension(100, 100));
        Card7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CardColor7Layout = new javax.swing.GroupLayout(CardColor7);
        CardColor7.setLayout(CardColor7Layout);
        CardColor7Layout.setHorizontalGroup(
            CardColor7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        CardColor7Layout.setVerticalGroup(
            CardColor7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        CardColor8.setBackground(new java.awt.Color(255, 153, 153));

        Card8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/memorygame/cards.jpg"))); // NOI18N
        Card8.setMaximumSize(new java.awt.Dimension(100, 100));
        Card8.setMinimumSize(new java.awt.Dimension(100, 100));
        Card8.setPreferredSize(new java.awt.Dimension(100, 100));
        Card8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CardColor8Layout = new javax.swing.GroupLayout(CardColor8);
        CardColor8.setLayout(CardColor8Layout);
        CardColor8Layout.setHorizontalGroup(
            CardColor8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        CardColor8Layout.setVerticalGroup(
            CardColor8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        CardColor9.setBackground(new java.awt.Color(255, 153, 153));

        Card9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/memorygame/cards.jpg"))); // NOI18N
        Card9.setMaximumSize(new java.awt.Dimension(100, 100));
        Card9.setMinimumSize(new java.awt.Dimension(100, 100));
        Card9.setPreferredSize(new java.awt.Dimension(100, 100));
        Card9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CardColor9Layout = new javax.swing.GroupLayout(CardColor9);
        CardColor9.setLayout(CardColor9Layout);
        CardColor9Layout.setHorizontalGroup(
            CardColor9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        CardColor9Layout.setVerticalGroup(
            CardColor9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        CardColor10.setBackground(new java.awt.Color(255, 153, 153));

        Card10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/memorygame/cards.jpg"))); // NOI18N
        Card10.setMaximumSize(new java.awt.Dimension(100, 100));
        Card10.setMinimumSize(new java.awt.Dimension(100, 100));
        Card10.setPreferredSize(new java.awt.Dimension(100, 100));
        Card10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CardColor10Layout = new javax.swing.GroupLayout(CardColor10);
        CardColor10.setLayout(CardColor10Layout);
        CardColor10Layout.setHorizontalGroup(
            CardColor10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        CardColor10Layout.setVerticalGroup(
            CardColor10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        CardColor11.setBackground(new java.awt.Color(255, 153, 153));

        Card11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/memorygame/cards.jpg"))); // NOI18N
        Card11.setMaximumSize(new java.awt.Dimension(100, 100));
        Card11.setMinimumSize(new java.awt.Dimension(100, 100));
        Card11.setPreferredSize(new java.awt.Dimension(100, 100));
        Card11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CardColor11Layout = new javax.swing.GroupLayout(CardColor11);
        CardColor11.setLayout(CardColor11Layout);
        CardColor11Layout.setHorizontalGroup(
            CardColor11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        CardColor11Layout.setVerticalGroup(
            CardColor11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        CardColor12.setBackground(new java.awt.Color(255, 153, 153));

        Card12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/memorygame/cards.jpg"))); // NOI18N
        Card12.setMaximumSize(new java.awt.Dimension(100, 100));
        Card12.setMinimumSize(new java.awt.Dimension(100, 100));
        Card12.setPreferredSize(new java.awt.Dimension(100, 100));
        Card12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CardColor12Layout = new javax.swing.GroupLayout(CardColor12);
        CardColor12.setLayout(CardColor12Layout);
        CardColor12Layout.setHorizontalGroup(
            CardColor12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        CardColor12Layout.setVerticalGroup(
            CardColor12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        CardColor13.setBackground(new java.awt.Color(255, 153, 153));

        Card13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/memorygame/cards.jpg"))); // NOI18N
        Card13.setMaximumSize(new java.awt.Dimension(100, 100));
        Card13.setMinimumSize(new java.awt.Dimension(100, 100));
        Card13.setPreferredSize(new java.awt.Dimension(100, 100));
        Card13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card13ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CardColor13Layout = new javax.swing.GroupLayout(CardColor13);
        CardColor13.setLayout(CardColor13Layout);
        CardColor13Layout.setHorizontalGroup(
            CardColor13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        CardColor13Layout.setVerticalGroup(
            CardColor13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        CardColor14.setBackground(new java.awt.Color(255, 153, 153));

        Card14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/memorygame/cards.jpg"))); // NOI18N
        Card14.setMaximumSize(new java.awt.Dimension(100, 100));
        Card14.setMinimumSize(new java.awt.Dimension(100, 100));
        Card14.setPreferredSize(new java.awt.Dimension(100, 100));
        Card14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card14ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CardColor14Layout = new javax.swing.GroupLayout(CardColor14);
        CardColor14.setLayout(CardColor14Layout);
        CardColor14Layout.setHorizontalGroup(
            CardColor14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        CardColor14Layout.setVerticalGroup(
            CardColor14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        CardColor15.setBackground(new java.awt.Color(255, 153, 153));

        Card15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/memorygame/cards.jpg"))); // NOI18N
        Card15.setMaximumSize(new java.awt.Dimension(100, 100));
        Card15.setMinimumSize(new java.awt.Dimension(100, 100));
        Card15.setPreferredSize(new java.awt.Dimension(100, 100));
        Card15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card15ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CardColor15Layout = new javax.swing.GroupLayout(CardColor15);
        CardColor15.setLayout(CardColor15Layout);
        CardColor15Layout.setHorizontalGroup(
            CardColor15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        CardColor15Layout.setVerticalGroup(
            CardColor15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        CardColor16.setBackground(new java.awt.Color(255, 153, 153));

        Card16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/memorygame/cards.jpg"))); // NOI18N
        Card16.setMaximumSize(new java.awt.Dimension(100, 100));
        Card16.setMinimumSize(new java.awt.Dimension(100, 100));
        Card16.setPreferredSize(new java.awt.Dimension(100, 100));
        Card16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Card16ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CardColor16Layout = new javax.swing.GroupLayout(CardColor16);
        CardColor16.setLayout(CardColor16Layout);
        CardColor16Layout.setHorizontalGroup(
            CardColor16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        CardColor16Layout.setVerticalGroup(
            CardColor16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Card16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        TimesClicked.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        TimesClicked.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        TimesClicked.setText("Times Clicked:");

        Score.setText("Score");
        Score.setMaximumSize(new java.awt.Dimension(83, 20));
        Score.setMinimumSize(new java.awt.Dimension(83, 20));
        Score.setPreferredSize(new java.awt.Dimension(83, 20));

        Highscore1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        Highscore1.setText("High Score:");

        Highscore.setText("highscore");

        Finish.setText("Finish");
        Finish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FinishActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CardColor1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CardColor2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CardColor3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CardColor4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CardColor13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CardColor14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CardColor15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CardColor16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CardColor9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CardColor10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CardColor11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CardColor12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CardColor5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CardColor6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CardColor7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CardColor8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Finish)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TimesClicked, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Highscore1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Highscore)
                                    .addComponent(Score, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Finish)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(CardColor4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CardColor3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CardColor2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CardColor1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CardColor5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CardColor6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CardColor7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CardColor8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(CardColor9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CardColor10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CardColor11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CardColor12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(95, 95, 95)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TimesClicked, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Score, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Highscore1)
                                    .addComponent(Highscore))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CardColor13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CardColor14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CardColor15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CardColor16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Card3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card3ActionPerformed
        // TODO add your handling code here:
        Card3.setContentAreaFilled(false);
        Card3.setBorderPainted(false);
        Card3.setIcon(null);
        if (timesclicked % 2 == 0) {
            ColorClicked[1] = twodArray[0][2];
            CardArray[1] = Card3;
            timer.start();
        } else {
            ColorClicked[0] = twodArray[0][2];
            CardArray[0] = Card3;
            timesclicked++;
        }

        Score.setText(Integer.toString(timesclicked - 1));

    }//GEN-LAST:event_Card3ActionPerformed

    private void Card4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card4ActionPerformed
        // TODO add your handling code here:
        Card4.setContentAreaFilled(false);
        Card4.setBorderPainted(false);
        Card4.setIcon(null);
        if (timesclicked % 2 == 0) {
            ColorClicked[1] = twodArray[0][3];
            CardArray[1] = Card4;
            timer.start();
        } else {
            ColorClicked[0] = twodArray[0][3];
            CardArray[0] = Card4;
            timesclicked++;
        }

        Score.setText(Integer.toString(timesclicked - 1));
    }//GEN-LAST:event_Card4ActionPerformed

    private void Card5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card5ActionPerformed
        // TODO add your handling code here:
        Card5.setContentAreaFilled(false);
        Card5.setBorderPainted(false);
        Card5.setIcon(null);
        if (timesclicked % 2 == 0) {
            ColorClicked[1] = twodArray[1][0];
            CardArray[1] = Card5;
            timer.start();
        } else {
            ColorClicked[0] = twodArray[1][0];
            CardArray[0] = Card5;
            timesclicked++;
        }

        Score.setText(Integer.toString(timesclicked - 1));
    }//GEN-LAST:event_Card5ActionPerformed

    private void Card6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card6ActionPerformed
        // TODO add your handling code here:
        Card6.setContentAreaFilled(false);
        Card6.setBorderPainted(false);
        Card6.setIcon(null);
        if (timesclicked % 2 == 0) {
            ColorClicked[1] = twodArray[1][1];
            CardArray[1] = Card6;
            timer.start();
        } else {
            ColorClicked[0] = twodArray[1][1];
            CardArray[0] = Card6;
            timesclicked++;
        }

        Score.setText(Integer.toString(timesclicked - 1));
    }//GEN-LAST:event_Card6ActionPerformed

    private void Card7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card7ActionPerformed
        // TODO add your handling code here:
        Card7.setContentAreaFilled(false);
        Card7.setBorderPainted(false);
        Card7.setIcon(null);
        if (timesclicked % 2 == 0) {
            ColorClicked[1] = twodArray[1][2];
            CardArray[1] = Card7;
            timer.start();
        } else {
            ColorClicked[0] = twodArray[1][2];
            CardArray[0] = Card7;
            timesclicked++;
        }

        Score.setText(Integer.toString(timesclicked - 1));
    }//GEN-LAST:event_Card7ActionPerformed

    private void Card8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card8ActionPerformed
        // TODO add your handling code here:
        Card8.setContentAreaFilled(false);
        Card8.setBorderPainted(false);
        Card8.setIcon(null);
        if (timesclicked % 2 == 0) {
            ColorClicked[1] = twodArray[1][3];
            CardArray[1] = Card8;
            timer.start();
        } else {
            ColorClicked[0] = twodArray[1][3];
            CardArray[0] = Card8;
            timesclicked++;
        }
        Score.setText(Integer.toString(timesclicked - 1));
    }//GEN-LAST:event_Card8ActionPerformed

    private void Card9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card9ActionPerformed
        // TODO add your handling code here:Button3.setContentAreaFilled(false);
        Card9.setContentAreaFilled(false);
        Card9.setBorderPainted(false);
        Card9.setIcon(null);
        if (timesclicked % 2 == 0) {
            ColorClicked[1] = twodArray[2][0];
            CardArray[1] = Card9;
            timer.start();
        } else {
            ColorClicked[0] = twodArray[2][0];
            CardArray[0] = Card9;
            timesclicked++;
        }
        Score.setText(Integer.toString(timesclicked - 1));
    }//GEN-LAST:event_Card9ActionPerformed

    private void Card10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card10ActionPerformed
        // TODO add your handling code here: 
        Card10.setContentAreaFilled(false);
        Card10.setBorderPainted(false);
        Card10.setIcon(null);
        if (timesclicked % 2 == 0) {
            ColorClicked[1] = twodArray[2][1];
            CardArray[1] = Card10;
            timer.start();
        } else {
            ColorClicked[0] = twodArray[2][1];
            CardArray[0] = Card10;
            timesclicked++;
        }
        Score.setText(Integer.toString(timesclicked - 1));
    }//GEN-LAST:event_Card10ActionPerformed

    private void Card11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card11ActionPerformed
        // TODO add your handling code here:
        Card11.setContentAreaFilled(false);
        Card11.setBorderPainted(false);
        Card11.setIcon(null);
        if (timesclicked % 2 == 0) {
            ColorClicked[1] = twodArray[2][2];
            CardArray[1] = Card11;
            timer.start();
        } else {
            ColorClicked[0] = twodArray[2][2];
            CardArray[0] = Card11;
            timesclicked++;
        }
        Score.setText(Integer.toString(timesclicked - 1));
    }//GEN-LAST:event_Card11ActionPerformed

    private void Card12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card12ActionPerformed
        // TODO add your handling code here:
        Card12.setContentAreaFilled(false);
        Card12.setBorderPainted(false);
        Card12.setIcon(null);
        if (timesclicked % 2 == 0) {
            ColorClicked[1] = twodArray[2][3];
            CardArray[1] = Card12;
            timer.start();
        } else {
            ColorClicked[0] = twodArray[2][3];
            CardArray[0] = Card12;
            timesclicked++;
        }
        Score.setText(Integer.toString(timesclicked - 1));
    }//GEN-LAST:event_Card12ActionPerformed

    private void Card13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card13ActionPerformed
        // TODO add your handling code here:
        Card13.setContentAreaFilled(false);
        Card13.setBorderPainted(false);
        Card13.setIcon(null);
        if (timesclicked % 2 == 0) {
            ColorClicked[1] = twodArray[3][0];
            CardArray[1] = Card13;
            timer.start();
        } else {
            ColorClicked[0] = twodArray[3][0];
            CardArray[0] = Card13;
            timesclicked++;
        }
        Score.setText(Integer.toString(timesclicked - 1));
    }//GEN-LAST:event_Card13ActionPerformed

    private void Card14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card14ActionPerformed
        // TODO add your handling code here:
        Card14.setContentAreaFilled(false);
        Card14.setBorderPainted(false);
        Card14.setIcon(null);
        if (timesclicked % 2 == 0) {
            ColorClicked[1] = twodArray[3][1];
            CardArray[1] = Card14;
            timer.start();
        } else {
            ColorClicked[0] = twodArray[3][1];
            CardArray[0] = Card14;
            timesclicked++;
        }
        Score.setText(Integer.toString(timesclicked - 1));
    }//GEN-LAST:event_Card14ActionPerformed

    private void Card15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card15ActionPerformed
        // TODO add your handling code here:
        Card15.setContentAreaFilled(false);
        Card15.setBorderPainted(false);
        Card15.setIcon(null);
        if (timesclicked % 2 == 0) {
            ColorClicked[1] = twodArray[3][2];
            CardArray[1] = Card15;
            timer.start();
        } else {
            ColorClicked[0] = twodArray[3][2];
            CardArray[0] = Card15;
            timesclicked++;
        }
        Score.setText(Integer.toString(timesclicked - 1));
    }//GEN-LAST:event_Card15ActionPerformed

    private void Card2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card2ActionPerformed
        // TODO add your handling code here:
        Card2.setContentAreaFilled(false);
        Card2.setBorderPainted(false);
        Card2.setIcon(null);
        if (timesclicked % 2 == 0) {
            ColorClicked[1] = twodArray[0][1];
            CardArray[1] = Card2;
            timer.start();
        } else {
            ColorClicked[0] = twodArray[0][1];
            CardArray[0] = Card2;
            timesclicked++;
        }
        Score.setText(Integer.toString(timesclicked - 1));
    }//GEN-LAST:event_Card2ActionPerformed

    private void Card1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card1ActionPerformed
        // TODO add your handling code here:
        Card1.setContentAreaFilled(false);
        Card1.setBorderPainted(false);
        Card1.setIcon(null);
        if (timesclicked % 2 == 0) {
            ColorClicked[1] = twodArray[0][0];
            CardArray[1] = Card1;
            timer.start();
        } else {
            ColorClicked[0] = twodArray[0][0];
            CardArray[0] = Card1;
            timesclicked++;
        }
        Score.setText(Integer.toString(timesclicked - 1));
    }//GEN-LAST:event_Card1ActionPerformed

    private void Card16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Card16ActionPerformed
        // TODO add your handling code here:
        Card16.setContentAreaFilled(false);
        Card16.setBorderPainted(false);
        Card16.setIcon(null);
        if (timesclicked % 2 == 0) {
            ColorClicked[1] = twodArray[3][3];
            CardArray[1] = Card16;
            timer.start();
        } else {
            ColorClicked[0] = twodArray[3][3];
            CardArray[0] = Card16;
            timesclicked++;
        }
        Score.setText(Integer.toString(timesclicked - 1));
    }//GEN-LAST:event_Card16ActionPerformed

    private void FinishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FinishActionPerformed
        WriteToFile();
        this.setVisible(false);
        timer3.start();
    }//GEN-LAST:event_FinishActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Card1;
    private javax.swing.JButton Card10;
    private javax.swing.JButton Card11;
    private javax.swing.JButton Card12;
    private javax.swing.JButton Card13;
    private javax.swing.JButton Card14;
    private javax.swing.JButton Card15;
    private javax.swing.JButton Card16;
    private javax.swing.JButton Card2;
    private javax.swing.JButton Card3;
    private javax.swing.JButton Card4;
    private javax.swing.JButton Card5;
    private javax.swing.JButton Card6;
    private javax.swing.JButton Card7;
    private javax.swing.JButton Card8;
    private javax.swing.JButton Card9;
    private javax.swing.JPanel CardColor1;
    private javax.swing.JPanel CardColor10;
    private javax.swing.JPanel CardColor11;
    private javax.swing.JPanel CardColor12;
    private javax.swing.JPanel CardColor13;
    private javax.swing.JPanel CardColor14;
    private javax.swing.JPanel CardColor15;
    private javax.swing.JPanel CardColor16;
    private javax.swing.JPanel CardColor2;
    private javax.swing.JPanel CardColor3;
    private javax.swing.JPanel CardColor4;
    private javax.swing.JPanel CardColor5;
    private javax.swing.JPanel CardColor6;
    private javax.swing.JPanel CardColor7;
    private javax.swing.JPanel CardColor8;
    private javax.swing.JPanel CardColor9;
    private javax.swing.JButton Finish;
    private javax.swing.JLabel Highscore;
    private javax.swing.JLabel Highscore1;
    private javax.swing.JLabel Score;
    private java.awt.Label TimesClicked;
    // End of variables declaration//GEN-END:variables

    private void ShuffelArray(Color[] colorArray) {
        //shuffle colors
        Random random = new Random();
        for (int i = colorArray.length - 1; i > 0; i--) {
            int index = random.nextInt(i + 1);
            //swap
            Color temp = colorArray[index];
            colorArray[index] = colorArray[i];
            colorArray[i] = temp;
        }
    }

    private void CopyArray(Color[] colorArray, Color[][] twodArray, int arraygrootte) {
        //copy the one array into one 2d array
        int k = 0;
        for (int i = 0; i < arraygrootte; i++) {
            for (int j = 0; j < arraygrootte; j++) {
                twodArray[i][j] = colorArray[k];
                k++;
            }
        }
    }

    private void SetBackground(Color[][] twodArray) {
        //set background of the Jpanels
        CardColor1.setBackground(twodArray[0][0]);
        CardColor2.setBackground(twodArray[0][1]);
        CardColor3.setBackground(twodArray[0][2]);
        CardColor4.setBackground(twodArray[0][3]);
        CardColor5.setBackground(twodArray[1][0]);
        CardColor6.setBackground(twodArray[1][1]);
        CardColor7.setBackground(twodArray[1][2]);
        CardColor8.setBackground(twodArray[1][3]);

        CardColor9.setBackground(twodArray[2][0]);
        CardColor10.setBackground(twodArray[2][1]);
        CardColor11.setBackground(twodArray[2][2]);
        CardColor12.setBackground(twodArray[2][3]);
        CardColor13.setBackground(twodArray[3][0]);
        CardColor14.setBackground(twodArray[3][1]);
        CardColor15.setBackground(twodArray[3][2]);
        CardColor16.setBackground(twodArray[3][3]);
    }

    private void CheckIfSame() {
        //check if the colors that are selected are the same
        if (ColorClicked[0] == ColorClicked[1]) {
            CardArray[0].setEnabled(false);
            CardArray[1].setEnabled(false);
            Arrays.fill(CardArray, null);
            Arrays.fill(ColorClicked, null);
            timesclicked++;
        } else {

            CardArray[0].setContentAreaFilled(true);
            CardArray[0].setBorderPainted(true);
            CardArray[1].setContentAreaFilled(true);
            CardArray[1].setBorderPainted(true);
            setIcon();
            Arrays.fill(CardArray, null);
            Arrays.fill(ColorClicked, null);
            timesclicked++;
        }
        timer.stop();
    }

    //write to file to store the highscore from the current run
    private void WriteToFile() {
        String content = Integer.toString(timesclicked - 2);

        if (timesclicked < highscore) {

            try {
                //Assume default encoding.
                FileWriter filerwriter = new FileWriter(filename);

                //Always wrap FileWriter in BufferedWriter.
                BufferedWriter bufferedwriter = new BufferedWriter(filerwriter);
                bufferedwriter.write(content);
                //close
                bufferedwriter.close();

            } catch (IOException ex) {
                System.out.println("Error writing to file '" + filename + "'");
            }
        }

        if (highscore == 0) {
            try {
                //Assume default encoding.
                FileWriter filerwriter = new FileWriter(filename);

                //Always wrap FileWriter in BufferedWriter.
                BufferedWriter bufferedwriter = new BufferedWriter(filerwriter);
                bufferedwriter.write(content);
                //close
                bufferedwriter.close();

            } catch (IOException ex) {
                System.out.println("Error writing to file '" + filename + "'");
            }
        }
    }

    private void setIcon() {

        try {
            Image img = ImageIO.read(getClass().getResource("cards.jpg"));
            CardArray[0].setIcon(new ImageIcon(img));
            CardArray[1].setIcon(new ImageIcon(img));

        } catch (IOException ex) {
            System.out.println("icon niet gevonden");
        }
    }
}
